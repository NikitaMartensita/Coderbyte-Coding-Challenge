// Have the function MultipleBrackets(str) take the str parameter being passed and return 1 #ofBrackets if the
// brackets are correctly matched and each one is accounted for. Otherwise return 0. For example: if str is 
// "(hello [world])(!)", then the output should be 1 3 because all the brackets are matched and there are 3 pairs
// of brackets, but if str is "((hello [world])" the the output should be 0 because the brackets do not correctly
// match up. Only "(", ")", "[", and "]" will be used as brackets. If str contains no brackets return 1. 

function MultipleBrackets(str) {
    if (str.indexOf("(") < 0 && str.indexOf(")") < 0 && str.indexOf("[") < 0 && str.indexOf("]") < 0)
        return 1;
    var res = [];
    var count = 0;
    for (var i = 0; i < str.length; i++) {
        if (str[i] == "(" || str[i] == "[") {
            res.push(str[i]);
            count++;
        }
        if (str[i] == ")") {
            if (res.length === 0)
                return 0;
            else if (res.pop() != "(")
                return 0;
        } else if (str[i] == "]") {
            if (res.length === 0)
                return 0;
            else if (res.pop() != "[")
                return 0;
        }
    }
    if (res.length !== 0)
        return 0;
    else
        return "1 " + count;
}

// keep this function call here 
// to see how to enter arguments in JavaScript scroll down
MultipleBrackets(readline());           
